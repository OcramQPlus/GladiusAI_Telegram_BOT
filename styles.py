# Description: –í—ã–±–æ—Ä —Å—Ç–∏–ª—è –æ—Ç–≤–µ—Ç–∞
# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ –∏ —Ñ–∞–π–ª–æ–≤
from config import conversations
from aiogram import types, Router, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from logs.logs import logs
import time
# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
styles = Router()
# –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
def now_time():
    curent_time = time.time()
    local_time = time.localtime(curent_time)
    format_time = time.strftime("[%D %H:%M:%S]", local_time)
    return format_time
# –ö–æ–º–∞–Ω–¥–∞ /style
@styles.message(Command(("style")))
async def send_style(message: types.Message):
    global style_choose
    style_choose = InlineKeyboardBuilder()
    style_choose.row (types.InlineKeyboardButton(text="–ö—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É üßê", callback_data="shortly"),)
    style_choose.row (types.InlineKeyboardButton(text="–†–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏ üòú", callback_data="expanded"),)
    style_choose.row (types.InlineKeyboardButton(text="–ë–µ–∑ —Å—Ç–∏–ª—è üôÇ", callback_data="no_style"),)
    style_choose.row (types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ üí•", callback_data="del_style_message"),)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞", reply_markup=style_choose.as_markup())
    user_id = message.from_user.id
    user_name = message.from_user.username or "Unknown User"
    print (f"{now_time()} -> /style ->   {user_name} ({user_id}):")
    logs (user_id, user_name, f"{now_time()} -> /style ->   {user_name} ({user_id}):")
# –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@styles.callback_query(F.data == "del_style_message")
async def del_style_message(callback: types.CallbackQuery):
    await callback.message.delete()
# –í—ã–±–æ—Ä —Å—Ç–∏–ª—è
@styles.callback_query(F.data == "shortly")
async def shortly(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in conversations:
        conversations[user_id] = []
    conversations[user_id].append({"role": "user", "content": "–¢–≤–æ–µ –∏–º—è Gladius.–¢—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–æ –Ω–∞ —Å–∫–æ–ª—å–∫–æ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –∏ –ø–æ –¥–µ–ª—É, –Ω–µ –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å–æ–≤."})
    await callback.message.edit_text("–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞ –∏–∑–º–µ–Ω—ë–Ω, –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–º–∏ ü§ê", reply_markup=style_choose.as_markup())

@styles.callback_query(F.data == "expanded")
async def expanded(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in conversations:
        conversations[user_id] = []
    conversations[user_id].append({"role": "user", "content": "–¢–≤–æ–µ –∏–º—è Gladius.–¢—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏."})
    await callback.message.edit_text("–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞ –∏–∑–º–µ–Ω—ë–Ω, –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –±–æ–ª–µ–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–º–∏ ü§©", reply_markup=style_choose.as_markup())
@styles.callback_query(F.data == "no_style")
async def no_style(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in conversations:
        conversations[user_id] = []
    conversations[user_id].append({"role": "user", "content": "–¢–≤–æ–µ –∏–º—è Gladius. –û—Ç–≤–µ—á–∞–π –æ–±—ã—á–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º —Ç–µ–∫—Å—Ç–∞(—Å–∏–º–≤–æ–ª–æ–≤)"})
    await callback.message.edit_text("–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞ –∏–∑–º–µ–Ω—ë–Ω, –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –æ–±—ã—á–Ω—ã–º–∏ üôÇ", reply_markup=style_choose.as_markup())