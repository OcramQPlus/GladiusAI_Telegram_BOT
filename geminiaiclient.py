# Description: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini API
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫ –∏ —Ñ–∞–π–ª–æ–≤
import asyncio
import time
from google.genai import types as genai_types
from logs.logs import logs
from aiogram import types, Router
from aiogram.enums import ParseMode
from forai import last_request_time, RATE_LIMIT, now_time, waiting_response_generator
from config import conversations, gemini_client
import admin 
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
async def gemini_answer(message: types.Message):
    try:
        # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
        user_id = message.from_user.id
        current_time = time.time()
        if user_id in last_request_time:
            time_passed = current_time - last_request_time[user_id]
            if time_passed < RATE_LIMIT:
                remaining = round(RATE_LIMIT - time_passed, 1)
                msg = await message.reply(f"–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ {round(remaining)} —Å–µ–∫. ‚è≥. ")
                await asyncio.sleep(RATE_LIMIT)
                await msg.edit_text("<b>–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å üé≠</b>", parse_mode=ParseMode.HTML)
                await asyncio.sleep(3)
                await msg.delete()
                return
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        config = admin.get_user_config(message.from_user.id)
        last_request_time[user_id] = current_time
        user_name = message.from_user.username or "Unknown User"
        print(f"{now_time()} -> –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ->   {user_name} ({user_id}): {message.text}")
        logs(user_id, user_name, f"{now_time()} -> –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -> {user_name} ({user_id}): {message.text}")
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏ –≤—ã–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
        waiting_response_generator_result = waiting_response_generator()
        waiting_msg = await message.reply(waiting_response_generator_result)
        print(f"{now_time()} -> –°–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è ->   {user_name} ({user_id}):", waiting_response_generator_result)
        logs(user_id, user_name, f"{now_time()} -> –°–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è -> {user_name} ({user_id}): {waiting_response_generator_result}")
        # –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
        if user_id not in conversations:
            conversations[user_id] = gemini_client.chats.create(model=config["gemini_model"], 
            config = genai_types.GenerateContentConfig(system_instruction= config["default_prompts"]) )
        elif isinstance(conversations[user_id], list):
            conversations[user_id] = gemini_client.chats.create(model=config["gemini_model"],
            config = genai_types.GenerateContentConfig(system_instruction= config["default_prompts"]))
        response = conversations[user_id].send_message(message.text)
        response_text = response.text
        # –í—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ –∏ –º–æ–¥–µ–ª–∏
        print(f"{now_time()} -> Gladius message ->   {user_name} ({user_id}): {response_text}")
        print(f"{now_time()} -> –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å ->   {user_name} ({user_id}):", config["gemini_model"],)
        logs(user_id, user_name, f"{now_time()} -> Gladius message -> {user_name} ({user_id}): {response_text}")
        logs(user_id, user_name, f"{now_time()} -> –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å -> {user_name} ({user_id}): {config["gemini_model"],}")
        # –í—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ + –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ debug_mode
        if config["debug_mode"] == True:
            debug_model = f"\n–ú–æ–¥–µ–ª—å: {config["gemini_model"],}"
            await waiting_msg.edit_text(response_text + debug_model)
        else:
            await waiting_msg.edit_text(response_text)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    except Exception as e:
        print(f"{now_time()} -> [Error]: {str(e)}")
        logs(user_id, user_name, f"{now_time()} -> [Error]: {str(e)}")
        await waiting_msg.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É(–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): {str(e)} \n–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏–ª–∞—Å—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /clear")
