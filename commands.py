# Description: –§–∞–π–ª —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –±–æ—Ç–∞
# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ –∏ —Ñ–∞–π–ª–æ–≤
from aiogram import types, F, Router
from aiogram.filters.command import Command
from aiogram.enums import ParseMode
from config import conversations
import time
from logs.logs import logs
import admin
import prompts
# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
commands = Router()
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
def now_time():
    curent_time = time.time()
    local_time = time.localtime(curent_time)
    format_time = time.strftime("[%D %H:%M:%S]", local_time)
    return format_time
# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
# –ö–æ–º–∞–Ω–¥–∞ /start
@commands.message(Command(("start")))
async def send_welcome(message: types.Message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    user_name = message.from_user.username or "Unknown User"
    conversations[user_id] = []
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name_for_start = message.from_user.first_name or ""
    await message.reply(f"""
–ü—Ä–∏–≤–µ—Ç {user_name_for_start}! –Ø - –ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä Gladiusüë®‚Äçüéì, –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ —Ñ–∏–∑–∏–∫–µ.
–ß—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ, –Ω–∞–ø–∏—à–∏ /help    
                        """)
    print(f"{now_time()} -> /start ->   {user_name} ({user_id}):")
    logs (user_id, user_name, f"{now_time()} -> /start -> {user_name} ({user_id}):")
# –ö–æ–º–∞–Ω–¥–∞ /clear
@commands.message(Command(("clear")))
async def clear_history(message: types.Message):
    user_name = message.from_user.username or "Unknown User"
    user_id = message.from_user.id
    # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    conversations[user_id] = []
    await message.reply("–ü–∞–º—è—Ç—å —Å—Ç—ë—Ä—Ç–∞üòì")
    print(f"{now_time()} -> /clear ->   {user_name} ({user_id}):")
    logs (user_id, user_name, f"{now_time()} -> /clear -> {user_name} ({user_id}):")
#–û—á–∏—Å—Ç–∫–∞/–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@commands.message(Command(("clear_settings")))
async def clear_settings(message: types.Message):
    user_id = message.from_user.id
    config = admin.get_user_config(message.from_user.id)
    config["ai_right_now"] = "mistral_ai_client"
    config["default_prompts"] = prompts.physical_prompt
    config["mistral_model"] = "mistral-large-latest"
    config["gemini_model"] = "gemini-2.0-flash"
    config["debug_mode"] = False
    conversations[user_id] = []
    await message.reply("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ãüòì")
    print(f"{now_time()} -> /clear_settings ->   {message.from_user.username or 'Unknown User'} ({user_id}):")
    logs (user_id, message.from_user.username or 'Unknown User', f"{now_time()} -> /clear_settings -> {message.from_user.username or 'Unknown User'} ({user_id}):")
# –ö–æ–º–∞–Ω–¥–∞ /help
@commands.message(F.text, Command(("help")))
async def send_help(message: types.Message):
    await message.answer("""
–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã:
    /start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º
    /clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    /help - –ü–æ–º–æ—â—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –±–æ—Ç—É
    /clear_settings - –û—á–∏—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    /admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    /feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏–ª–∏ –∏–¥–µ—é
–ù–∞ –æ—Å–Ω–æ–≤–µ: <b>Mistral Ai</b>
–ü–æ–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
<span class=\"tg-spoiler\">–í–æ–∑–º–æ–∂–Ω—ã –æ—à–∏–±–∫–∏</span>
                         """, parse_mode=ParseMode.HTML)
    user_id = message.from_user.id
    user_name = message.from_user.username or "Unknown User"
    print(f"{now_time()} -> /help ->   {user_name} ({user_id}):")
    logs (user_id, user_name, f"{now_time()} -> /help -> {user_name} ({user_id}):")
    
    

    
    
