# Description: –ú–æ–¥—É–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞.
# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ –∏ —Ñ–∞–π–ª–æ–≤
import time
from config import conversations, ADMIN
import prompts
from aiogram import types, Router, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command, BaseFilter
from aiogram.types import Message
from logs.logs import logs
from plugins import get_plugins_config
# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
admin_router = Router()
# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞
GladiusAI_status = True
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_configs = {}
def get_user_config(user_id: int):
    if user_id not in user_configs:
        user_configs[user_id] = {
            "ai_right_now": "mistral_ai_client",
            "default_prompts": prompts.physical_prompt,
            "mistral_model": "mistral-large-latest",
            "gemini_model": "gemini-2.0-flash",
            "debug_mode": False,
        }
    return user_configs[user_id]
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
def now_time():
    curent_time = time.time()
    local_time = time.localtime(curent_time)
    format_time = time.strftime("[%D %H:%M:%S]", local_time)
    return format_time
# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
class IsAdminFilter(BaseFilter):
    def __init__(self, admin_ids: list[int]):
        self.admin_ids = admin_ids
    async def __call__(self, message: Message) -> bool:
        return message.from_user.id in self.admin_ids
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def create_admin_menu() -> InlineKeyboardBuilder:
    admin_menu = InlineKeyboardBuilder()
    admin_menu.row(types.InlineKeyboardButton(text="–í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ üë®‚Äçüë©‚Äçüëß‚Äçüë¶", callback_data="promt_choose_admin"))
    admin_menu.row(types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫–æ–≤—É—é –º–æ–¥–µ–ª—å üë§", callback_data="model_selection_admin"))
    admin_menu.row(types.InlineKeyboardButton(text="–û—Ç–ª–∞–¥–∫–∞ üõ†", callback_data="debug"))
    admin_menu.row(types.InlineKeyboardButton(text="ON and OFF üõë", callback_data="on_off"))
    admin_menu.row(types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ üí•", callback_data="del_admin_menu"))
    return admin_menu
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@admin_router.message(IsAdminFilter(admin_ids=ADMIN), Command(("admin")))
async def admin_command(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.username or "Unknown User"
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    config = get_user_config(user_id)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üß©", reply_markup=create_admin_menu().as_markup())
    print(f"{now_time()} -> /admin ->   {user_name} ({user_id}):")
    logs(user_id, user_name, f"{now_time()} -> /admin ->   {user_name} ({user_id}):")
# –ï—Å–ª–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç
@admin_router.message(Command("admin"))
async def not_admin(message: types.Message):
    await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ üö´")
    user_id = message.from_user.id
    user_name = message.from_user.username or "Unknown User"
    print(f"{now_time()} -> /admin ->   {user_name} ({user_id}):")
    logs(user_id, user_name, f"{now_time()} -> /admin ->   {user_name} ({user_id}):")
# –í—ã–±–æ—Ä –ò–ò
@admin_router.callback_query(F.data == "ai_choose")
async def ai_choose(callback: types.CallbackQuery):
    ai_choose_kb = InlineKeyboardBuilder()
    ai_choose_kb.row(types.InlineKeyboardButton(text="MistralAI üå™", callback_data="mistralai"))
    ai_choose_kb.row(types.InlineKeyboardButton(text="GeminiAI üåå", callback_data="geminiai"))
    ai_choose_kb.row(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©", callback_data="back_to_admin_menu"))
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ò–ò ü§ñ:", reply_markup=ai_choose_kb.as_markup())
    await callback.answer()
# –í–∫–ª—é—á–µ–Ω–∏–µ –∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞
@admin_router.callback_query(F.data == "on_off")
async def on_off(callback: types.CallbackQuery):
    on_off_menu = InlineKeyboardBuilder()
    on_off_menu.row(types.InlineKeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å üí°", callback_data="on"))
    on_off_menu.row(types.InlineKeyboardButton(text="–í—ã–∫–ª—é—á–∏—Ç—å üîå", callback_data="off"))
    on_off_menu.row(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©", callback_data="back_to_admin_menu"))
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëÄ", reply_markup=on_off_menu.as_markup())
    await callback.answer()
# –í–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞
@admin_router.callback_query(F.data == "on")
async def on(callback: types.CallbackQuery):
    global GladiusAI_status
    GladiusAI_status = True
    await callback.message.edit_text("–í–∫–ª—é—á–µ–Ω–æ üí°", reply_markup=create_admin_menu().as_markup())
    print(f"{now_time()} -> bot_on ->   {callback.from_user.username} ({callback.from_user.id}):")
    logs(callback.from_user.id, callback.from_user.username, f"{now_time()} -> bot_on ->   {callback.from_user.username} ({callback.from_user.id}):")
    await callback.answer()
# –í—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞
@admin_router.callback_query(F.data == "off")
async def off(callback: types.CallbackQuery):
    global GladiusAI_status
    GladiusAI_status = False
    await callback.message.edit_text("–í—ã–∫–ª—é—á–µ–Ω–æ üîå", reply_markup=create_admin_menu().as_markup())
    print(f"{now_time()} -> bot_off ->   {callback.from_user.username} ({callback.from_user.id}):")
    logs(callback.from_user.id, callback.from_user.username, f"{now_time()} -> bot_off ->   {callback.from_user.username} ({callback.from_user.id}):")
    await callback.answer()
# –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@admin_router.callback_query(F.data == "back_to_admin_menu")
async def back_to_admin_menu(callback: types.CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üß©", reply_markup=create_admin_menu().as_markup())
    await callback.answer()
# –û—Ç–ª–∞–¥–∫–∞
@admin_router.callback_query(F.data == "debug")
async def debug(callback: types.CallbackQuery):
    debug_menu = InlineKeyboardBuilder()
    debug_menu.row(types.InlineKeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å üíâ", callback_data="debug_on"))
    debug_menu.row(types.InlineKeyboardButton(text="–í—ã–∫–ª—é—á–∏—Ç—å üß´", callback_data="debug_off"))
    debug_menu.row(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©", callback_data="back_to_admin_menu"))
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëÄ", reply_markup=debug_menu.as_markup())
    await callback.answer()
# –í–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–∫–∏
@admin_router.callback_query(F.data == "debug_on")
async def debug_on(callback: types.CallbackQuery):
    config = get_user_config(callback.from_user.id)
    config["debug_mode"] = True
    await callback.message.edit_text("–û—Ç–ª–∞–¥–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ üß∞", reply_markup=create_admin_menu().as_markup())
    print(f"{now_time()} -> debug_on ->   {callback.from_user.username} ({callback.from_user.id}):")
    logs(callback.from_user.id, callback.from_user.username, f"{now_time()} -> debug_on ->   {callback.from_user.username} ({callback.from_user.id}):")
    await callback.answer()
# –í—ã–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–∫–∏
@admin_router.callback_query(F.data == "debug_off")
async def debug_off(callback: types.CallbackQuery):
    config = get_user_config(callback.from_user.id)
    config["debug_mode"] = False
    await callback.message.edit_text("–û—Ç–ª–∞–¥–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞ ‚ö∞", reply_markup=create_admin_menu().as_markup())
    print(f"{now_time()} -> debug_off ->   {callback.from_user.username} ({callback.from_user.id}):")
    logs(callback.from_user.id, callback.from_user.username, f"{now_time()} -> debug_off ->   {callback.from_user.username} ({callback.from_user.id}):")
    await callback.answer()
# –£–¥–∞–ª–µ–Ω–∏–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@admin_router.callback_query(F.data == "del_admin_menu")
async def del_admin_menu(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.answer()
# –í—ã–±–æ—Ä —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏
@admin_router.callback_query(F.data == "model_selection_admin")
async def model_selection_admin(callback: types.CallbackQuery):
    config = get_user_config(callback.from_user.id)
    model_selection = InlineKeyboardBuilder()
    print(f"{now_time()} -> model_selection_admin ->   {callback.from_user.username} ({callback.from_user.id}):")
    logs(callback.from_user.id, callback.from_user.username, f"{now_time()} -> model_selection_admin ->   {callback.from_user.username} ({callback.from_user.id}):")
    # –í—ã–±–æ—Ä —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è MistralAI
    config_plugins = get_plugins_config(callback.from_user.id)
    if config_plugins["gemini_client"] == False:
        model_selection.row(types.InlineKeyboardButton(text="pixtral-large-latest", callback_data="pixtral_large_latest"))
        model_selection.row(types.InlineKeyboardButton(text="ministral-8b-latest", callback_data="ministral_8b_latest"))
        model_selection.row(types.InlineKeyboardButton(text="mistral-large-latest", callback_data="mistral-large-latest"))
        model_selection.row(types.InlineKeyboardButton(text="ministral-3b-latest", callback_data="ministral_3b_latest"))
        model_selection.row(types.InlineKeyboardButton(text="pixtral-12b-2409", callback_data="pixtral_12b_2409"))
        model_selection.row(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©", callback_data="back_to_admin_menu"))
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫–æ–≤—É—é –º–æ–¥–µ–ª—å:", reply_markup=model_selection.as_markup())
    # –í—ã–±–æ—Ä —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è GeminiAI
    else:
        model_selection.row(types.InlineKeyboardButton(text="gemini-2.0-flash", callback_data="gemini_2.0_flash"))
        model_selection.row(types.InlineKeyboardButton(text="gemini-2.0-flash-lite", callback_data="gemini_2.0_flash_lite"))
        model_selection.row(types.InlineKeyboardButton(text="gemini-2.0-pro-exp-02-05", callback_data="gemini_2.0_pro_exp_02_05"))
        model_selection.row(types.InlineKeyboardButton(text="gemini-1.5-flash", callback_data="gemini_1.5_flash"))
        model_selection.row(types.InlineKeyboardButton(text="gemini-1.5-flash-8b", callback_data="gemini_1.5_flash_8b"))
        model_selection.row(types.InlineKeyboardButton(text="gemini-1.5-pro", callback_data="gemini_1.5_pro"))
        model_selection.row(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©", callback_data="back_to_admin_menu"))
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫–æ–≤—É—é –º–æ–¥–µ–ª—å:", reply_markup=model_selection.as_markup())
# –í—ã–±–æ—Ä —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è GeminiAI
@admin_router.callback_query(F.data == "gemini_2.0_flash")
async def gemini_2_0_flash(callback: types.CallbackQuery):
    config = get_user_config(callback.from_user.id)
    config["gemini_model"] = "gemini-2.0-flash"
    await callback.message.edit_text("–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: gemini-2.0-flash", reply_markup=create_admin_menu().as_markup())
    print(f"{now_time()} -> {config['gemini_model']} ->   {callback.from_user.username} ({callback.from_user.id}):")
    logs(callback.from_user.id, callback.from_user.username, f"{now_time()} -> {config['gemini_model']} ->   {callback.from_user.username} ({callback.from_user.id}):")
    await callback.answer()
@admin_router.callback_query(F.data == "gemini_2.0_flash_lite")
async def gemini_2_0_flash_lite(callback: types.CallbackQuery):
    config = get_user_config(callback.from_user.id)
    config["gemini_model"] = "gemini-2.0-flash-lite"
    await callback.message.edit_text("–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: gemini-2.0-flash-lite", reply_markup=create_admin_menu().as_markup())
    print(f"{now_time()} -> {config['gemini_model']} ->   {callback.from_user.username} ({callback.from_user.id}):")
    logs(callback.from_user.id, callback.from_user.username, f"{now_time()} -> {config['gemini_model']} ->   {callback.from_user.username} ({callback.from_user.id}):")
    await callback.answer()
@admin_router.callback_query(F.data == "gemini_2.0_pro_exp_02_05")
async def gemini_2_0_pro_exp_02_05(callback: types.CallbackQuery):
    config = get_user_config(callback.from_user.id)
    config["gemini_model"] = "gemini-2.0-pro-exp-02-05"
    await callback.message.edit_text("–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: gemini-2.0-pro-exp-02-05", reply_markup=create_admin_menu().as_markup())
    print(f"{now_time()} -> {config['gemini_model']} ->   {callback.from_user.username} ({callback.from_user.id}):")
    logs(callback.from_user.id, callback.from_user.username, f"{now_time()} -> {config['gemini_model']} ->   {callback.from_user.username} ({callback.from_user.id}):")
    await callback.answer()
@admin_router.callback_query(F.data == "gemini_1.5_flash")
async def gemini_1_5_flash(callback: types.CallbackQuery):
    config = get_user_config(callback.from_user.id)
    config["gemini_model"] = "gemini-1.5-flash"
    await callback.message.edit_text("–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: gemini-1.5-flash", reply_markup=create_admin_menu().as_markup())
    print(f"{now_time()} -> {config['gemini_model']} ->   {callback.from_user.username} ({callback.from_user.id}):")
    logs(callback.from_user.id, callback.from_user.username, f"{now_time()} -> {config['gemini_model']} ->   {callback.from_user.username} ({callback.from_user.id}):")
    await callback.answer()
@admin_router.callback_query(F.data == "gemini_1.5_flash_8b")
async def gemini_1_5_flash_8b(callback: types.CallbackQuery):
    config = get_user_config(callback.from_user.id)
    config["gemini_model"] = "gemini-1.5-flash-8b"
    await callback.message.edit_text("–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: gemini-1.5-flash-8b", reply_markup=create_admin_menu().as_markup())
    print(f"{now_time()} -> {config['gemini_model']} ->   {callback.from_user.username} ({callback.from_user.id}):")
    logs(callback.from_user.id, callback.from_user.username, f"{now_time()} -> {config['gemini_model']} ->   {callback.from_user.username} ({callback.from_user.id}):")
    await callback.answer()
@admin_router.callback_query(F.data == "gemini_1.5_pro")
async def gemini_1_5_pro(callback: types.CallbackQuery):
    config = get_user_config(callback.from_user.id)
    config["gemini_model"] = "gemini-1.5-pro"
    await callback.message.edit_text("–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: gemini-1.5-pro", reply_markup=create_admin_menu().as_markup())
    print(f"{now_time()} -> {config['gemini_model']} ->   {callback.from_user.username} ({callback.from_user.id}):")
    logs(callback.from_user.id, callback.from_user.username, f"{now_time()} -> {config['gemini_model']} ->   {callback.from_user.username} ({callback.from_user.id}):")
    await callback.answer()
# –í—ã–±–æ—Ä —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è MistralAI
@admin_router.callback_query(F.data == "pixtral_large_latest")
async def pixtral_large_latest(callback: types.CallbackQuery):
    config = get_user_config(callback.from_user.id)
    config["mistral_model"] = "pixtral-large-latest"
    await callback.message.edit_text("–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: pixtral-large-latest", reply_markup=create_admin_menu().as_markup())
    print(f"{now_time()} -> {config['mistral_model']} ->   {callback.from_user.username} ({callback.from_user.id}):")
    logs(callback.from_user.id, callback.from_user.username, f"{now_time()} -> {config['mistral_model']} ->   {callback.from_user.username} ({callback.from_user.id}):")
    await callback.answer()
@admin_router.callback_query(F.data == "ministral_8b_latest")
async def ministral_8b_latest(callback: types.CallbackQuery):
    config = get_user_config(callback.from_user.id)
    config["mistral_model"] = "ministral-8b-latest"
    await callback.message.edit_text("–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: ministral-8b-latest", reply_markup=create_admin_menu().as_markup())
    print(f"{now_time()} -> {config['mistral_model']} ->   {callback.from_user.username} ({callback.from_user.id}):")
    logs(callback.from_user.id, callback.from_user.username, f"{now_time()} -> {config['mistral_model']} ->   {callback.from_user.username} ({callback.from_user.id}):")
    await callback.answer()
@admin_router.callback_query(F.data == "mistral-large-latest")
async def mistral_large_latest(callback: types.CallbackQuery):
    config = get_user_config(callback.from_user.id)
    config["mistral_model"] = "mistral-large-latest"
    await callback.message.edit_text("–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: mistral-large-latest", reply_markup=create_admin_menu().as_markup())
    print(f"{now_time()} -> {config['mistral_model']} ->   {callback.from_user.username} ({callback.from_user.id}):")
    logs(callback.from_user.id, callback.from_user.username, f"{now_time()} -> {config['mistral_model']} ->   {callback.from_user.username} ({callback.from_user.id}):")
    await callback.answer()
@admin_router.callback_query(F.data == "ministral_3b_latest")
async def ministral_3b_latest(callback: types.CallbackQuery):
    config = get_user_config(callback.from_user.id)
    config["mistral_model"] = "ministral-3b-latest"
    await callback.message.edit_text("–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: ministral-3b-latest", reply_markup=create_admin_menu().as_markup())
    print(f"{now_time()} -> {config['mistral_model']} ->   {callback.from_user.username} ({callback.from_user.id}):")
    logs(callback.from_user.id, callback.from_user.username, f"{now_time()} -> {config['mistral_model']} ->   {callback.from_user.username} ({callback.from_user.id}):")
    await callback.answer()
@admin_router.callback_query(F.data == "pixtral_12b_2409")
async def pixtral_12b_2409(callback: types.CallbackQuery):
    config = get_user_config(callback.from_user.id)
    config["mistral_model"] = "pixtral-12b-2409"
    await callback.message.edit_text("–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: pixtral-12b-2409", reply_markup=create_admin_menu().as_markup())
    print(f"{now_time()} -> {config['mistral_model']} ->   {callback.from_user.username} ({callback.from_user.id}):")
    logs(callback.from_user.id, callback.from_user.username, f"{now_time()} -> {config['mistral_model']} ->   {callback.from_user.username} ({callback.from_user.id}):")
    await callback.answer()
# –í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
@admin_router.callback_query(F.data == "promt_choose_admin")
async def promt_choose_admin(callback: types.CallbackQuery):
    promt_selection = InlineKeyboardBuilder()
    promt_selection.row(types.InlineKeyboardButton(text="–î–µ–≤–æ—á–∫–∞ üéÄ", callback_data="girl"))
    promt_selection.row(types.InlineKeyboardButton(text="–ú–∞–ª—å—á–∏–∫ üí™", callback_data="boy"))
    promt_selection.row(types.InlineKeyboardButton(text="–ó–ª–æ–¥–µ–π üòà", callback_data="villain"))
    promt_selection.row(types.InlineKeyboardButton(text="–°—Ç–∞–Ω–¥–∞—Ä—Ç üôÇ", callback_data="standart"))
    promt_selection.row(types.InlineKeyboardButton(text="–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä –§–∏–∑–∏–∫–∏ üß†", callback_data="physical"))
    promt_selection.row(types.InlineKeyboardButton(text="–°–ª—É—á–∞–π–Ω—ã–π üé∞", callback_data="random"))
    promt_selection.row(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©", callback_data="back_to_admin_menu"))
    await callback.message.edit_text("–í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=promt_selection.as_markup())
    await callback.answer()
# –í—ã–±–æ—Ä —Å—Ç–∏–ª—è –¥–µ–≤–æ—á–∫–∏
@admin_router.callback_query(F.data == "girl")
async def girl(callback: types.CallbackQuery):
    config = get_user_config(callback.from_user.id)
    config["default_prompts"] = prompts.girl_prompt
    await callback.message.edit_text("–û—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –≤ —Å—Ç–∏–ª–µ –¥–µ–≤–æ—á–∫–∏üéÄ", reply_markup=create_admin_menu().as_markup())
    print(f"{now_time()} -> Girl ->   {callback.from_user.username} ({callback.from_user.id}):")
    logs(callback.from_user.id, callback.from_user.username, f"{now_time()} -> Girl ->   {callback.from_user.username} ({callback.from_user.id}):")
    conversations[callback.from_user.id] = []
    await callback.answer()
# –í—ã–±–æ—Ä —Å—Ç–∏–ª—è –º–∞–ª—å—á–∏–∫–∞
@admin_router.callback_query(F.data == "boy")
async def boy(callback: types.CallbackQuery):
    config = get_user_config(callback.from_user.id)
    config["default_prompts"] = prompts.boy_prompt
    await callback.message.edit_text("–û—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –≤ —Å—Ç–∏–ª–µ –º–∞–ª—å—á–∏–∫–∞üèãÔ∏è‚Äç‚ôÄÔ∏è", reply_markup=create_admin_menu().as_markup())
    print(f"{now_time()} -> Boy ->   {callback.from_user.username} ({callback.from_user.id}):")
    logs(callback.from_user.id, callback.from_user.username, f"{now_time()} -> Boy ->   {callback.from_user.username} ({callback.from_user.id}):")
    conversations[callback.from_user.id] = []
    await callback.answer()
# –í—ã–±–æ—Ä —Å—Ç–∏–ª—è –∑–ª–æ–¥–µ—è
@admin_router.callback_query(F.data == "villain")
async def villain(callback: types.CallbackQuery):
    config = get_user_config(callback.from_user.id)
    config["default_prompts"] = prompts.villain_prompt
    await callback.message.edit_text("–û—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –≤ —Å—Ç–∏–ª–µ –∑–ª–æ–¥–µ—èüòà", reply_markup=create_admin_menu().as_markup())
    print(f"{now_time()} -> Villain ->   {callback.from_user.username} ({callback.from_user.id}):")
    logs(callback.from_user.id, callback.from_user.username, f"{now_time()} -> Villain ->   {callback.from_user.username} ({callback.from_user.id}):")
    conversations[callback.from_user.id] = []
    await callback.answer()
# –í—ã–±–æ—Ä —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å—Ç–∏–ª—è
@admin_router.callback_query(F.data == "standart")
async def standart(callback: types.CallbackQuery):
    config = get_user_config(callback.from_user.id)
    config["default_prompts"] = prompts.standart_prompt
    await callback.message.edit_text("–û—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –≤ –æ–±—ã—á–Ω–æ–º —Å—Ç–∏–ª–µü§ñ", reply_markup=create_admin_menu().as_markup())
    print(f"{now_time()} -> Standart ->   {callback.from_user.username} ({callback.from_user.id}):")
    logs(callback.from_user.id, callback.from_user.username, f"{now_time()} -> Standart ->   {callback.from_user.username} ({callback.from_user.id}):")
    conversations[callback.from_user.id] = []
    await callback.answer()
# –í—ã–±–æ—Ä —Å—Ç–∏–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä–∞ —Ñ–∏–∑–∏–∫–∏
@admin_router.callback_query(F.data == "physical")
async def physical(callback: types.CallbackQuery):
    config = get_user_config(callback.from_user.id)
    config["default_prompts"] = prompts.physical_prompt
    await callback.message.edit_text("–û—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –≤ —Å—Ç–∏–ª–µ –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä–∞ —Ñ–∏–∑–∏–∫–∏üë®‚Äçüè´", reply_markup=create_admin_menu().as_markup())
    print(f"{now_time()} -> Physical ->   {callback.from_user.username} ({callback.from_user.id}):")
    logs(callback.from_user.id, callback.from_user.username, f"{now_time()} -> Physical ->   {callback.from_user.username} ({callback.from_user.id}):")
    conversations[callback.from_user.id] = []
    await callback.answer()
# –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å—Ç–∏–ª—è
@admin_router.callback_query(F.data == "random")
async def random(callback: types.CallbackQuery):
    config = get_user_config(callback.from_user.id)
    config["default_prompts"] = prompts.random_prompt
    await callback.message.edit_text("–û—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –≤ —Å–ª—É—á–∞–π–Ω–æ–º —Å—Ç–∏–ª–µüé∞", reply_markup=create_admin_menu().as_markup())
    print(f"{now_time()} -> Random ->   {callback.from_user.username} ({callback.from_user.id}):")
    logs(callback.from_user.id, callback.from_user.username, f"{now_time()} -> Random ->   {callback.from_user.username} ({callback.from_user.id}):")
    conversations[callback.from_user.id] = []
    await callback.answer()